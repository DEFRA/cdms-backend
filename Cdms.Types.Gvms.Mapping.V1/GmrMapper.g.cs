//------------------------------------------------------------------------------
// <auto-generated>
	//     This code was generated from a template.
	//
	//     Manual changes to this file may cause unexpected behavior in your application.
	//     Manual changes to this file will be overwritten if the code is regenerated.
	//
//</auto-generated>
//------------------------------------------------------------------------------
#nullable enable


using Cdms.Model.Extensions;
using Cdms.Model.Relationships;

namespace Cdms.Types.Gvms.Mapping;

public static class GrmWithTransformMapper
{
    public static Cdms.Model.Gvms.Gmr MapWithTransform(Cdms.Types.Gvms.Gmr from)
    {
        if (from is null)
        {
            return default!;
        }

        var gmr = GmrMapper.Map(from);
        Map(from, gmr);
        return gmr;
    }

    private static void Map(Gmr from, Model.Gvms.Gmr to)
    {
        if (from.Declarations.Customs is not null)
        {
            to.Relationships.Customs = new TdmRelationshipObject()
            {
                Links = new RelationshipLinks()
                {
                    Self = "http://example.com/articles/1/relationships/author",
                    Related = "http://example.com/articles/1/author",
                },
                Data = from.Declarations.Customs.Select(x => new RelationshipDataItem()
                {
                    Id = x.Id, Type = "importnotification"
                }).ToList()
            };
        }

        if (from.Declarations.Transits is not null)
        {
            to.Relationships.Transits = new TdmRelationshipObject()
            {
                Links = new RelationshipLinks()
                {
                    Self = "http://example.com/articles/1/relationships/author",
                    Related = "http://example.com/articles/1/author",
                },
                Data = from.Declarations.Transits.Select(x => new RelationshipDataItem()
                {
                    Id = x.Id,
                    Type = "movement"
                }).ToList()
            };
        }
    }
}

public static class GmrMapper
{
	public static Cdms.Model.Gvms.Gmr Map(Cdms.Types.Gvms.Gmr from)
	{
	if(from is null)
	{
		return default!;
	}
		var to = new Cdms.Model.Gvms.Gmr ();
to.Id = from.GmrId;
            to.HaulierEori = from.HaulierEori;
            to.State = StateEnumMapper.Map(from?.State);
                to.InspectionRequired = from.InspectionRequired;
            to.ReportToLocations = from?.ReportToLocations?.Select(x => ReportToLocationsMapper.Map(x)).ToArray();
                to.LastUpdated = from.LastUpdated;
            to.Direction = DirectionEnumMapper.Map(from?.Direction);
                to.HaulierType = HaulierTypeEnumMapper.Map(from?.HaulierType);
                to.IsUnaccompanied = from.IsUnaccompanied;
            to.VehicleRegistrationNumber = from.VehicleRegistrationNumber;
            to.PlannedCrossing = PlannedCrossingMapper.Map(from?.PlannedCrossing);
                to.CheckedInCrossing = CheckedInCrossingMapper.Map(from?.CheckedInCrossing);
                to.ActualCrossing = ActualCrossingMapper.Map(from?.ActualCrossing);
                
                	return to;
	}
}

